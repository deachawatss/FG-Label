import React, { useState, useEffect, useMemo, useRef, KeyboardEvent } from 'react';
import { Modal, Table, Checkbox, Button, Row, Col, Input, Space, Typography, Collapse, Alert, Spin, Tabs, List, message } from 'antd';
import { SearchOutlined, InfoCircleOutlined, DatabaseOutlined, HistoryOutlined } from '@ant-design/icons';
import { v4 as uuidv4 } from 'uuid';
import { ElementType, TextElement } from '../../models/TemplateDesignerTypes';

const { Panel } = Collapse;
const { Text } = Typography;
const { TabPane } = Tabs;

interface BatchRow {
  // ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÄ‡∏™‡∏°‡∏≠
  id: string;            // ID ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÅ‡∏≠‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ
  batchNo: string;       // ‡∏£‡∏´‡∏±‡∏™ Batch
  
  // ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  itemKey: string;       // ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
  custKey: string;       // ‡∏£‡∏´‡∏±‡∏™‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
  
  // ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
  productName: string;   // ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Product ‡∏´‡∏£‡∏∑‡∏≠ BME_Product)
  product: string;       // ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô productName ‡πÅ‡∏ï‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô)
  
  // ‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î (‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà) - marked as optional
  productKey?: string;   // ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πà‡∏≤ - ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö itemKey)
  customerKey?: string;  // ‡∏£‡∏´‡∏±‡∏™‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πà‡∏≤ - ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö custKey)
  
  // ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ
  totalBags?: number;    // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ñ‡∏∏‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  shipToCountry?: string;
}

interface BatchFieldData {
  key: string;
  field: string;
  value: string | number | boolean | null;
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πà‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå
const ALIAS_ITEMKEY = [
  'ItemKey', 'itemKey', 'ITEMKEY',
  'ProductKey', 'productKey', 'PRODUCTKEY',
  'Assembly_Item_Key',
  'itemKeyResolved', 'ItemKeyResolved', 'ITEMKEYRESOLVED'
];

const ALIAS_CUSTKEY = [
  'CustKey', 'custKey', 'CUSTKEY',
  'CustomerKey', 'customerKey', 'CUSTOMERKEY',
  'Customer_Key',
  'custKeyResolved', 'CustKeyResolved', 'CUSTKEYRESOLVED'
];

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏¥‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏ü‡∏ã‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ï‡∏ä‡πå
interface BatchHistory {
  batchNo: string;
  timestamp: number;
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏µ‡∏¢‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÉ‡∏ô‡∏•‡∏π‡∏Å‡∏≠‡∏° storage
const BATCH_HISTORY_KEY = 'fglabel_batch_history';

interface BatchDataSelectionModalProps {
  visible: boolean;
  batchNo: string;
  onCancel: () => void;
  onConfirm: (elements: ElementType[], selectedBatchRow: BatchRow | null) => void;
  apiBaseUrl: string;
  onBatchChange?: (newBatchNo: string) => void;
}

const BatchDataSelectionModal: React.FC<BatchDataSelectionModalProps> = ({
  visible,
  batchNo,
  onCancel,
  onConfirm,
  apiBaseUrl,
  onBatchChange,
}) => {
  const [loading, setLoading] = useState(false);
  const [batchDataRows, setBatchDataRows] = useState<BatchRow[]>([]);
  const [selectedBatchRow, setSelectedBatchRow] = useState<BatchRow | null>(null);
  const [batchDetails, setBatchDetails] = useState<Record<string, any> | null>(null);
  const [selectedFields, setSelectedFields] = useState<string[]>([]);
  const [searchText, setSearchText] = useState('');
  const [dataError, setDataError] = useState<string | null>(null);
  const [currentStep, setCurrentStep] = useState<'select-row' | 'select-fields'>('select-row');
  const [rawSqlViewData, setRawSqlViewData] = useState<any[]>([]);
  const [useDirectViewData, setUseDirectViewData] = useState<boolean>(false);
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ï‡∏ä‡πå
  const [batchHistory, setBatchHistory] = useState<BatchHistory[]>([]);
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° ref ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏î Enter
  const searchInputRef = useRef<any>(null);
  const batchInputRef = useRef<any>(null);

// üëà 1.2  utility ‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡∏ó‡∏µ‡πà SQL ‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö)
const getFieldValue = (item: any, possibleNames: string[]) => {
  if (!item || !possibleNames || possibleNames.length === 0) {
    console.debug('getFieldValue: No item or possible names provided', { item, possibleNames });
    return '';
  }
  
  // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö case-insensitive ‡∏Å‡πà‡∏≠‡∏ô
  for (const name of possibleNames) {
    const foundKey = Object.keys(item).find(k => k.toLowerCase() === name.toLowerCase());
    if (foundKey && item[foundKey] != null && String(item[foundKey]).trim() !== '') {
      if (process.env.NODE_ENV === 'development') {
        console.debug(`getFieldValue found case-insensitive match: "${foundKey}" = "${item[foundKey]}"`);
      }
      return String(item[foundKey]).trim();
    }
  }
  
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏™‡∏ï‡∏£‡∏¥‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö)
  const normalize = (s: string) => s.toLowerCase().replace(/[^a-z0-9]/g, '');
  
  // ‡∏ó‡∏≥ normalize ‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
  const normalizedWanted = possibleNames.map(normalize);
  
  // DEV logging
  if (process.env.NODE_ENV === 'development') {
    console.debug('getFieldValue searching for normalized keys:', normalizedWanted);
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å key ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö shipToCountry ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏î‡∏µ‡∏ö‡∏±‡∏Å
    const countryRelatedKeys = Object.keys(item).filter(key => 
      key.toLowerCase().includes('country') || 
      key.toLowerCase().includes('shipto')
    );
    
    if (countryRelatedKeys.length > 0) {
      console.debug('Country-related keys and values:');
      countryRelatedKeys.forEach(key => {
        console.debug(`  ${key}: "${item[key]}" (normalized: "${normalize(key)}")`);
      });
    }
  }

  // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà 2: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)
  for (const name of possibleNames) {
    if (item[name] !== undefined && item[name] !== null && String(item[name]).trim() !== '') {
      if (process.env.NODE_ENV === 'development') {
        console.debug(`getFieldValue found exact match: "${name}" = "${item[name]}"`);
      }
      return String(item[name]).trim();
    }
  }
  
  // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà 3: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö normalized ‡∏ã‡∏∂‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà-‡πÄ‡∏•‡πá‡∏Å ‡πÅ‡∏•‡∏∞‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©
  for (const [key, value] of Object.entries(item)) {
    if (normalizedWanted.includes(normalize(key)) && 
        value !== undefined && 
        value !== null && 
        String(value).trim() !== '') {
      if (process.env.NODE_ENV === 'development') {
        console.debug(`getFieldValue found normalized match: "${key}" (${normalize(key)}) = "${value}"`);
      }
      return String(value).trim();
    }
  }
  
  // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà 4: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ö‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô (partial match) - ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
  const lowerCaseNames = possibleNames.map(n => n.toLowerCase());
  for (const key of Object.keys(item)) {
    const lowerKey = key.toLowerCase();
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡πÉ‡∏ô lowerCaseNames ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô lowerKey ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const partialMatch = lowerCaseNames.some(name => lowerKey.includes(name.toLowerCase()));
    if (partialMatch && 
        item[key] !== undefined && 
        item[key] !== null && 
        String(item[key]).trim() !== '') {
      if (process.env.NODE_ENV === 'development') {
        console.debug(`getFieldValue found partial match: "${key}" = "${item[key]}"`);
      }
      return String(item[key]).trim();
    }
  }
  
  if (process.env.NODE_ENV === 'development') {
    console.debug(`getFieldValue: No match found for ${possibleNames.join(', ')}`);
  }
  return '';
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SQL ‡πÇ‡∏î‡∏¢‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
// ‡πÄ‡∏ä‡πà‡∏ô ShipToCountry, shipto_country, SHIPTO_COUNTRY
const getMissingSqlFieldValue = (item: any, fieldName: string): string | null => {
  // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• item
  if (!item) return null;
  
  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ô‡∏µ‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
  if (item[fieldName] !== undefined && 
      item[fieldName] !== null && 
      item[fieldName] !== "null" && 
      String(item[fieldName]).trim() !== '') {
    return String(item[fieldName]).trim();
  }
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á normalized variants ‡∏Ç‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå
  const variants = [
    // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ lowercase ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    fieldName.toLowerCase(),
    // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ uppercase ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    fieldName.toUpperCase(),
    // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ camelCase (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏≥)
    fieldName.charAt(0).toLowerCase() + fieldName.slice(1),
    // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ PascalCase (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏≥)
    fieldName.charAt(0).toUpperCase() + fieldName.slice(1),
    // ‡πÅ‡∏õ‡∏•‡∏á camelCase ‡πÄ‡∏õ‡πá‡∏ô snake_case
    fieldName.replace(/([A-Z])/g, '_$1').toLowerCase(),
    // ‡πÅ‡∏õ‡∏•‡∏á camelCase ‡πÄ‡∏õ‡πá‡∏ô kebab-case
    fieldName.replace(/([A-Z])/g, '-$1').toLowerCase()
  ];
  
  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å variant
  for (const variant of variants) {
    if (item[variant] !== undefined && 
        item[variant] !== null && 
        item[variant] !== "null" && 
        String(item[variant]).trim() !== '') {
      return String(item[variant]).trim();
    }
  }
  
  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ô‡∏µ‡πâ
  const normalizedFieldName = fieldName.toLowerCase();
  
  for (const key of Object.keys(item)) {
    if (key.toLowerCase().includes(normalizedFieldName) && 
        item[key] !== undefined && 
        item[key] !== null && 
        item[key] !== "null" && 
        String(item[key]).trim() !== '') {
      return String(item[key]).trim();
    }
  }
  
  // ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  return null;
};

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç getShipToCountry ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ getMissingSqlFieldValue
const getShipToCountry = (item: any): string => {
  if (!item) return '';

  // 1) ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏µ‡∏ö‡∏±‡∏Å (‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô development)
  if (process.env.NODE_ENV === 'development') {
    console.group('üîç getShipToCountry - input data analysis');
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á item ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á
    console.log('All item keys:', Object.keys(item));
    console.log('Item data snippet (first few fields):', JSON.stringify(
      Object.fromEntries(
        Object.entries(item).slice(0, 10) // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 10 ‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÅ‡∏£‡∏Å
      ), null, 2)
    );
    
    const countryKeys = Object.keys(item).filter(key => 
      key.toLowerCase().includes('country') || 
      key.toLowerCase().includes('ship')
    );
    
    if (countryKeys.length > 0) {
      console.log('Ship/Country-related keys found:');
      countryKeys.forEach(key => {
        console.log(`  - ${key}: "${item[key]}", type: ${typeof item[key]}`);
      });
    } else {
      console.warn('No Ship/Country-related keys found in data!');
      console.log('All available keys:', Object.keys(item));
    }
    console.groupEnd();
  }
  
  // 2) ‡πÉ‡∏ä‡πâ getMissingSqlFieldValue ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡πà‡∏≤ shipToCountry
  const shipToCountryValue = getMissingSqlFieldValue(item, 'shipToCountry');
  if (shipToCountryValue) {
    if (process.env.NODE_ENV === 'development') {
      console.log(`‚úÖ Found shipToCountry via getMissingSqlFieldValue: "${shipToCountryValue}"`);
    }
    return shipToCountryValue;
  }
  
  // 3) ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏à‡∏≤‡∏Å hardcoded fields ‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏°‡∏µ
  for (const field of ['ShipToCountry', 'SHIPTO_COUNTRY', 'shipToCountry', 'shipto_country']) {
    if (item[field] !== undefined && 
        item[field] !== null && 
        item[field] !== "null" && 
        String(item[field]).trim() !== '') {
      if (process.env.NODE_ENV === 'development') {
        console.log(`‚úÖ Found via hardcoded field: "${field}" = "${item[field]}"`);
      }
      return String(item[field]).trim();
    }
  }
  
  // 4) ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡πà‡∏≤ country ‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "country" (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° countryoforigin)
  const countryKey = Object.keys(item).find(key => {
    const normalizedKey = key.toLowerCase();
    // ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô countryoforigin ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®
    return normalizedKey.includes('country') && 
           normalizedKey.includes('ship') &&
           !normalizedKey.includes('origin') &&
           item[key] != null && 
           item[key] !== "null" &&
           String(item[key]).trim() !== '';
  });
  
  if (countryKey) {
    if (process.env.NODE_ENV === 'development') {
      console.log(`‚úÖ Found by partial country key: "${countryKey}" = "${item[countryKey]}"`);
    }
    return String(item[countryKey]).trim();
  }

  // 5) fallback -> Country (‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)
  if (item.Country && item.Country !== "null" && String(item.Country).trim() !== '') {
    if (process.env.NODE_ENV === 'development') {
      console.log(`‚ÑπÔ∏è Falling back to Country: "${item.Country}"`);
    }
    return String(item.Country).trim();
  }
  
  if (process.env.NODE_ENV === 'development') {
    console.warn(`‚ùå No ship to country or country found in item`);
  }
  
  return '';  // ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÄ‡∏•‡∏¢
};

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô helper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ batch item ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
  const findBatchDetailItem = (batchItems: any[], row: BatchRow) => {
    // ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:
    
    // 1. ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á itemKey, custKey ‡πÅ‡∏•‡∏∞ shipToCountry ‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≤‡∏°‡∏Ñ‡πà‡∏≤
    if (row.itemKey && row.custKey && row.shipToCountry) {
      const exactMatchWithCountry = batchItems.find(item => {
        const itemKeyValue = getFieldValue(item, ALIAS_ITEMKEY);
        const custKeyValue = getFieldValue(item, ALIAS_CUSTKEY);
        const shipToCountryValue = getShipToCountry(item);
        
        return itemKeyValue === row.itemKey && 
               custKeyValue === row.custKey && 
               shipToCountryValue.toUpperCase() === row.shipToCountry.toUpperCase();
      });
      if (exactMatchWithCountry) {
        console.log(`‚úÖ Found exact match with itemKey, custKey and shipToCountry for ${row.custKey}`);
        return exactMatchWithCountry;
      }
    }
    
    // 2. ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á itemKey ‡πÅ‡∏•‡∏∞ custKey ‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ñ‡πà‡∏≤
    if (row.itemKey && row.custKey) {
      const exactMatch = batchItems.find(item => {
        const itemKeyValue = getFieldValue(item, ALIAS_ITEMKEY);
        const custKeyValue = getFieldValue(item, ALIAS_CUSTKEY);
        
        return itemKeyValue === row.itemKey && custKeyValue === row.custKey;
      });
      if (exactMatch) {
        // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ShipToCountry ‡πÄ‡∏≠‡∏á ‡πÅ‡∏ï‡πà‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        if (process.env.NODE_ENV === 'development') {
          const originalShipToCountry = exactMatch.ShipToCountry || exactMatch.SHIPTO_COUNTRY;
          console.log(`üìä Found match with ItemKey=${row.itemKey}, CustKey=${row.custKey}, ShipToCountry from API: "${originalShipToCountry || 'NOT SET'}"`);
        }
        
        console.log(`‚úÖ Found exact match with itemKey and custKey for ${row.custKey}`);
        return exactMatch;
      }
    }
    
    // 3. ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÅ‡∏Ñ‡πà itemKey ‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å itemKey
    if (row.itemKey) {
      const itemKeyMatch = batchItems.find(item => {
        const itemKeyValue = getFieldValue(item, ALIAS_ITEMKEY);
        return itemKeyValue === row.itemKey;
      });
      if (itemKeyMatch) {
        console.log(`‚ö†Ô∏è Found match by itemKey only for ${row.itemKey}`);
        return itemKeyMatch;
      }
    }
    
    // 4. ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÅ‡∏Ñ‡πà custKey ‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å custKey
    if (row.custKey) {
      const custKeyMatch = batchItems.find(item => {
        const custKeyValue = getFieldValue(item, ALIAS_CUSTKEY);
        return custKeyValue === row.custKey;
      });
      if (custKeyMatch) {
        console.log(`‚ö†Ô∏è Found match by custKey only for ${row.custKey}`);
        return custKeyMatch;
      }
    }
    
    // 5. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡πÉ‡∏î‡πÜ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å
    console.log(`‚ö†Ô∏è No match found, using first item`);
    return batchItems[0];
  };

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ï‡∏ä‡πå
  const loadBatchHistory = () => {
    try {
      const historyJson = localStorage.getItem(BATCH_HISTORY_KEY);
      if (historyJson) {
        const history = JSON.parse(historyJson) as BatchHistory[];
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏° timestamp ‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤
        const sortedHistory = history.sort((a, b) => b.timestamp - a.timestamp);
        // ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≥ ‡πÇ‡∏î‡∏¢‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ batchNo
        const uniqueHistory = sortedHistory.filter((item, index, self) => 
          index === self.findIndex(t => t.batchNo === item.batchNo)
        );
        // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        setBatchHistory(uniqueHistory.slice(0, 10));
      }
    } catch (error) {
      console.error('Error loading batch history:', error);
    }
  };

  const saveBatchHistory = (batchNumber: string) => {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ï‡∏ä‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!batchNumber || batchNumber.trim() === '') {
        return;
      }
      
      const newEntry: BatchHistory = {
        batchNo: batchNumber.trim(),
        timestamp: Date.now()
      };
      
      // ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      const historyJson = localStorage.getItem(BATCH_HISTORY_KEY);
      let history: BatchHistory[] = [];
      
      if (historyJson) {
        history = JSON.parse(historyJson) as BatchHistory[];
      }
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
      history.push(newEntry);
      
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≥
      const sortedHistory = history.sort((a, b) => b.timestamp - a.timestamp);
      const uniqueHistory = sortedHistory.filter((item, index, self) => 
        index === self.findIndex(t => t.batchNo === item.batchNo)
      );
      
      // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
      const limitedHistory = uniqueHistory.slice(0, 10);
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÉ‡∏ô localStorage
      localStorage.setItem(BATCH_HISTORY_KEY, JSON.stringify(limitedHistory));
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state
      setBatchHistory(limitedHistory);
    } catch (error) {
      console.error('Error saving batch history:', error);
    }
  };

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Enter ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
  const handleSearchKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      if (searchText && filteredData.length > 0) {
        // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        const firstMatchField = filteredData[0].field;
        if (!selectedFields.includes(firstMatchField)) {
          setSelectedFields(prev => [...prev, firstMatchField]);
          message.success(`Field "${firstMatchField}" added successfully`);
        }
      }
    }
  };

  // Get batch data when the modal is opened
  useEffect(() => {
    if (visible) {
      // ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ï‡∏ä‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠
      loadBatchHistory();
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ï‡∏ä‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ batchNo ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      if (batchNo && batchNo.trim() !== '') {
        // ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å SQL View ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡∏°‡∏µ fallback
        fetchSqlViewDataDirectly();
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ï‡∏ä‡πå
        saveBatchHistory(batchNo);
      } else {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ batchNo ‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤ ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
        setDataError(null);
        setBatchDataRows([]);
        setBatchDetails(null);
      }
    } else {
      // Reset state when modal is closed
      setCurrentStep('select-row');
      setSelectedBatchRow(null);
      setBatchDetails(null);
      setSelectedFields([]);
      setRawSqlViewData([]);
      setUseDirectViewData(false);
    }
  }, [visible, batchNo]);

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô fetchSqlViewDataDirectly ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å View SQL ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
  const fetchSqlViewDataDirectly = async () => {
    // Check if there is a valid batchNo
    if (!batchNo || batchNo.trim() === '') {
      console.log('No valid batch number provided');
      return;
    }

    setLoading(true);
    setDataError(null);
    
    try {
      const token = localStorage.getItem('token');
      
      if (!token) {
        throw new Error('Please login before using this feature');
      }
      
      // Create URL for direct SQL View data fetch
      const apiUrl = `${apiBaseUrl}/batches/sqlview?batchNo=${batchNo}`;
      console.log(`Fetching data from SQL View directly: ${apiUrl}`);
      
      const response = await fetch(apiUrl, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (!response.ok) {
        throw new Error(`Unable to fetch data from SQL View: HTTP ${response.status} - ${response.statusText}`);
      }
      
      const data = await response.json();
      
      if (!data || (Array.isArray(data) && data.length === 0)) {
        throw new Error(`No data found for batch ${batchNo}`);
      }
      
      console.log(`üåü SQL view data loaded successfully for batch ${batchNo}`);
      
      // Store raw data from SQL View
      setRawSqlViewData(Array.isArray(data) ? data : [data]);
      setUseDirectViewData(true);
      
      // Transform raw data into application format
      const batchRows: BatchRow[] = (Array.isArray(data) ? data : [data]).map((item, index) => {
        // Extract values from known columns in SQL View
        const itemKeyValue = item.ItemKey || item.itemKey || item.ITEMKEY || item.itemKeyResolved;
        const custKeyValue = item.CustKey || item.custKey || item.CUSTKEY || item.custKeyResolved;
        const productValue = item.Product || item.product || item.BME_Product || item.PRODUCT || 'Unknown';
        const totalBagsValue = item.TotalBags || item.totalBags || item.TOTALBAGS || null;
        
        // Get ShipToCountry value directly from SQL View
        const shipToCountry = item.SHIPTO_COUNTRY || item.ShipToCountry || item.shipToCountry || '';
        
        console.log(`üìä SQL View Row #${index + 1}: ItemKey=${itemKeyValue}, CustKey=${custKeyValue}, ShipToCountry=${shipToCountry}`);
        
        return {
          id: `${batchNo}-${itemKeyValue || index}-${custKeyValue || ''}`,
          batchNo,
          itemKey: itemKeyValue || null,
          custKey: custKeyValue || null,
          productName: productValue,
          product: productValue,
          totalBags: totalBagsValue ? parseInt(totalBagsValue, 10) : 0,
          shipToCountry: shipToCountry || null,
        };
      });
      
      console.log(`üìã Created ${batchRows.length} batch rows from SQL view data`);
      setBatchDataRows(batchRows);
      
    } catch (error: any) {
      console.error('Error fetching SQL view data:', error);
      setDataError(`Unable to load data from SQL View: ${error.message}`);
      setBatchDataRows([]);
    } finally {
      setLoading(false);
    }
  };

  // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç fetchBatchDetails ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å SQL View ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  const fetchBatchDetails = async (row: BatchRow) => {
    // Reset previously selected fields and details when selecting a new row
    setBatchDetails(null);
    setSelectedFields([]);
    
    setLoading(true);
    setDataError(null);
    
    try {
      // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å SQL View ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
      if (useDirectViewData && rawSqlViewData.length > 0) {
        // ‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö row ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ itemKey ‡πÅ‡∏•‡∏∞ custKey ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå
        const matchingItem = rawSqlViewData.find(item => {
          const itemKeyValue = item.ItemKey || item.itemKey || item.ITEMKEY || item.itemKeyResolved;
          const custKeyValue = item.CustKey || item.custKey || item.CUSTKEY || item.custKeyResolved;
          
          return itemKeyValue === row.itemKey && custKeyValue === row.custKey;
        });
        
        if (matchingItem) {
          console.log('üéØ Found matching data in SQL View:', {
            itemKey: row.itemKey,
            custKey: row.custKey,
            shipToCountry: matchingItem.SHIPTO_COUNTRY || matchingItem.ShipToCountry
          });
          
          setBatchDetails(matchingItem);
          
          // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å common fields ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
          const commonFields = [
            'BatchNo', 'ProductionDate', 'Product', 
            'ItemKey', 'CustKey',
            'NET_WEIGHT1', 'GROSS_WEIGHT1', 'PACKSIZE1', 'PACKUNIT1', 
            'PACKSIZE2', 'PACKUNIT2', 'TOTAL_UNIT2_IN_UNIT1',
            'ALLERGEN1', 'STORECAP1', 'DaysToExpire',
            'Customer_Name', 'TotalBags', 'TotalCTN', 'TotalWeightKG'
          ];
          
          const availableFields = Object.keys(matchingItem);
          
          // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞ fields ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏¥‡∏¢‡∏°‡πÉ‡∏ä‡πâ
          const initialSelectedFields = commonFields.filter(field => 
            availableFields.includes(field) || 
            availableFields.includes(field.toUpperCase()) || 
            availableFields.includes(field.toLowerCase())
          );
          
          setSelectedFields(initialSelectedFields);
          setCurrentStep('select-fields');
          setLoading(false);
          return;
        } else {
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
          console.warn(`‚ö†Ô∏è No matching data found in SQL View for ItemKey=${row.itemKey}, CustKey=${row.custKey}`);
          setDataError(`No data found for ItemKey=${row.itemKey}, CustKey=${row.custKey}`);
        }
      } else {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å SQL View
        console.warn('‚ö†Ô∏è No data from SQL View');
        
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å SQL View ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        const token = localStorage.getItem('token');
        
        if (!token) {
          throw new Error('Please login before using this feature');
        }
        
        const apiUrl = `${apiBaseUrl}/batches/sqlview?batchNo=${row.batchNo}`;
        console.log(`Fetching data from SQL View again for batchNo=${row.batchNo}`);
        
        const response = await fetch(apiUrl, {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });
        
        if (!response.ok) {
          throw new Error(`Unable to fetch data from SQL View: HTTP ${response.status} - ${response.statusText}`);
        }
        
        const data = await response.json();
        
        if (!data || (Array.isArray(data) && data.length === 0)) {
          throw new Error(`No data found for batch ${row.batchNo}`);
        }
        
        console.log(`üåü Successfully fetched data from SQL View, ${Array.isArray(data) ? data.length : 1} items`);
        
        // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å SQL View
        const rawData = Array.isArray(data) ? data : [data];
        setRawSqlViewData(rawData);
        setUseDirectViewData(true);
        
        // ‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö row ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        const matchingItem = rawData.find(item => {
          const itemKeyValue = item.ItemKey || item.itemKey || item.ITEMKEY || item.itemKeyResolved;
          const custKeyValue = item.CustKey || item.custKey || item.CUSTKEY || item.custKeyResolved;
          
          return itemKeyValue === row.itemKey && custKeyValue === row.custKey;
        });
        
        if (matchingItem) {
          console.log('üéØ Found matching data in SQL View:', {
            itemKey: row.itemKey,
            custKey: row.custKey,
            shipToCountry: matchingItem.SHIPTO_COUNTRY || matchingItem.ShipToCountry
          });
          
          setBatchDetails(matchingItem);
          
          // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å common fields ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
          const commonFields = [
            'BatchNo', 'ProductionDate', 'Product', 
            'ItemKey', 'CustKey',
            'NET_WEIGHT1', 'GROSS_WEIGHT1', 'PACKSIZE1', 'PACKUNIT1', 
            'PACKSIZE2', 'PACKUNIT2', 'TOTAL_UNIT2_IN_UNIT1',
            'ALLERGEN1', 'STORECAP1', 'DaysToExpire',
            'Customer_Name', 'TotalBags', 'TotalCTN', 'TotalWeightKG'
          ];
          
          const availableFields = Object.keys(matchingItem);
          
          // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞ fields ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏¥‡∏¢‡∏°‡πÉ‡∏ä‡πâ
          const initialSelectedFields = commonFields.filter(field => 
            availableFields.includes(field) || 
            availableFields.includes(field.toUpperCase()) || 
            availableFields.includes(field.toLowerCase())
          );
          
          setSelectedFields(initialSelectedFields);
          setCurrentStep('select-fields');
          setLoading(false);
          return;
        } else {
          console.warn(`‚ö†Ô∏è No matching data found in SQL View for ItemKey=${row.itemKey}, CustKey=${row.custKey}`);
          setDataError(`No data found for ItemKey=${row.itemKey}, CustKey=${row.custKey}`);
        }
      }
    } catch (error: any) {
      console.error('Error fetching batch details:', error);
      setDataError(`Unable to load details: ${error.message}`);
      setBatchDetails(null);
    } finally {
      setLoading(false);
    }
  };

  // Convert batch details to table format
  const tableData: BatchFieldData[] = useMemo(() => {
    if (!batchDetails) return [];
    
    // List of fields to hide
    const hiddenFields = [
      'ItemKeyResolved',
      'CustKeyResolved',
      'LABEL_COLOR',
      'BME_Product',
      'DESCRIPTION',
      'LOT CODE',
      'BEST BEFORE',
      'LABEL INSTRUCTION',
      'HALALLOGO',
      'STANDARD_LABEL', 
      'SPECIAL_LABEL',
      'CUSTOMER_LABEL',
      'QSRFORMAT',
      'FOODADDITIVE',
      'CHECKBY',
      'INNER_PATH',
      'OUTER_PATH',
      'FormulaID',
      'Assembly_Location',
      'AssemblyType',
      'Content',
      'FillMeasuredIN',
      'TemplateID',
      'TemplateName',
      'TemplateUpdatedAt',
      'Engine',
      'PaperSize',
      'FillUOM',
      'BOMUOM',
      'AssemblyType',
      'UpdatedAt',
      'ContentBinary',
      'contentBinary',
      'SHIPTO_COUNTRY',
      'ShipToCountry',
      'shipToCountry',
      'LotCodeCaption',
      'FillLevel','BL_Product','BestBeforeCaption'
    ];
    
    return Object.entries(batchDetails)
      .filter(([key, value]) => {
        // Filter out null values and hidden fields
        return value !== null && 
               value !== undefined && 
               !hiddenFields.includes(key) &&
               !hiddenFields.includes(key.replace(/^_/, '')); // Also check without leading underscore
      })
      .map(([key, value]) => ({
        key,
        field: key,
        value: value,
      }));
  }, [batchDetails]);

  // Filter data based on search text
  const filteredData = useMemo(() => {
    if (!searchText) return tableData;
    
    const lowerSearchText = searchText.toLowerCase();
    return tableData.filter(
      item => 
        item.field.toLowerCase().includes(lowerSearchText) || 
        (typeof item.value === 'string' && item.value.toLowerCase().includes(lowerSearchText))
    );
  }, [tableData, searchText]);

  // Handle field selection/deselection
  const handleSelectField = (field: string, checked: boolean) => {
    if (checked) {
      setSelectedFields(prev => [...prev, field]);
    } else {
      setSelectedFields(prev => prev.filter(f => f !== field));
    }
  };

  // Create elements from selected fields
  const createElementsFromSelectedFields = () => {
    if (!batchDetails || selectedFields.length === 0) return [];
    
    const elements: ElementType[] = [];
    
    // ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡∏≠‡∏ö canvas
    const canvasPadding = 20;
    
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    let numColumns = 1; // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ fields ‡πÄ‡∏¢‡∏≠‡∏∞‡∏Å‡∏ß‡πà‡∏≤ 12 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡πÉ‡∏´‡πâ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    if (selectedFields.length > 12) {
      numColumns = 2;
    }
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 24 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡πÉ‡∏´‡πâ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô 3 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    if (selectedFields.length > 24) {
      numColumns = 3;
    }
    
    // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏à‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á
    // ‡πÇ‡∏î‡∏¢‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á canvas ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≤‡∏Å TemplateSettingsModal
    // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    const usableWidth = 360; // ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö canvas 400x400 (‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏´‡∏±‡∏Å‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏ö)
    const columnGap = 20; // ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    const totalGapWidth = (numColumns - 1) * columnGap;
    const columnWidth = Math.max(120, Math.floor((usableWidth - totalGapWidth) / numColumns));
    
    // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß
    const baseRowHeight = 25;
    
    // ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß
    const rowGap = 5;
    
    // ‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    const fieldsPerColumn = Math.ceil(selectedFields.length / numColumns);
    
    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    const columns = Array.from({ length: numColumns }, () => []);
    
    // ‡πÅ‡∏ö‡πà‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏•‡∏á‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    selectedFields.forEach((field, index) => {
      const columnIndex = Math.floor(index / fieldsPerColumn);
      columns[columnIndex].push(field);
    });
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ã‡∏™‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    const calculateFontSize = (text: string, availableWidth: number): number => {
      if (!text) return 14; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
      const baseSize = 14; // ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ã‡∏™‡πå‡∏ï‡πâ‡∏ô‡πÅ‡∏ö‡∏ö
      const avgCharWidth = 7; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÉ‡∏ô px
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢ px
      const estimatedTextWidth = text.length * avgCharWidth;
      
      if (estimatedTextWidth <= availableWidth * 0.85) {
        // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡πâ‡∏ô‡∏û‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ã‡∏™‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
        return baseSize;
      } else {
        // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ï‡πà‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ã‡∏™‡πå
        const ratio = (availableWidth * 0.85) / estimatedTextWidth;
        // ‡∏•‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ã‡∏™‡πå‡∏ï‡∏≤‡∏°‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 10px
        return Math.max(10, Math.floor(baseSize * ratio));
      }
    };
    
    // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    columns.forEach((columnFields, columnIndex) => {
      columnFields.forEach((field, rowIndex) => {
        const value = batchDetails[field];
        if (value === null || value === undefined) return;
        
        // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        let textValue = typeof value === 'object' ? JSON.stringify(value) : String(value);
        
        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠ field
        const displayText = textValue;
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á X ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        const posX = canvasPadding + (columnIndex * (columnWidth + columnGap));
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ô‡∏µ‡πâ
        const maxTextWidth = columnWidth - 10; // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå)
        const textWidth = Math.min(maxTextWidth, Math.max(100, displayText.length * 7));
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ã‡∏™‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        const fontSize = calculateFontSize(displayText, maxTextWidth);
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ã‡∏™‡πå
        const textHeight = Math.max(baseRowHeight, fontSize * 1.2);
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Y
        const posY = canvasPadding + rowIndex * (textHeight + rowGap);
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á text element
        elements.push({
          id: uuidv4(),
          type: 'text',
          x: posX,
          y: posY,
          width: textWidth,
          height: textHeight,
          text: displayText,
          fontSize: fontSize,
          fontFamily: 'Arial',
          fill: '#000000',
          align: 'left',
          draggable: true,
          visible: true
        } as TextElement);
      });
    });
    
    return elements;
  };

  // Handler for confirming field selection
  const handleConfirm = () => {
    if (!batchDetails || selectedFields.length === 0) {
      message.error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ');
      return;
    }
    
    const newElements = createElementsFromSelectedFields();
    if (newElements.length > 0) {
      // ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ï‡∏ä‡πå
      const historyItem = {
        batchNo: batchNo,
        timestamp: Date.now()
      };
      
      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÇ‡∏î‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ö‡∏ï‡∏ä‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏™‡∏∏‡∏î
      const newHistory = [
        historyItem,
        ...batchHistory.filter(item => item.batchNo !== batchNo).slice(0, 9) // ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      ];
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÉ‡∏ô localStorage
      localStorage.setItem(BATCH_HISTORY_KEY, JSON.stringify(newHistory));
      
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á parent component
      onConfirm(newElements, selectedBatchRow);
    } else {
      message.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á elements ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    }
  };

  // Handle select all fields
  const handleSelectAll = (checked: boolean) => {
    if (checked) {
      setSelectedFields(filteredData.map(item => item.field));
    } else {
      setSelectedFields([]);
    }
  };

  // Select a batch row
  const handleSelectBatchRow = (row: BatchRow) => {
    setSelectedBatchRow(row);
    fetchBatchDetails(row);
  };

  // Columns for the field selection table
  const fieldColumns = [
    {
      title: (
        <Checkbox
          checked={filteredData.length > 0 && selectedFields.length === filteredData.length}
          indeterminate={selectedFields.length > 0 && selectedFields.length < filteredData.length}
          onChange={(e) => handleSelectAll(e.target.checked)}
        >
          Select All
        </Checkbox>
      ),
      dataIndex: 'field',
      key: 'field',
      width: '40%',
      render: (text: string, record: BatchFieldData) => (
        <Checkbox
          checked={selectedFields.includes(record.field)}
          onChange={(e) => handleSelectField(record.field, e.target.checked)}
        >
          {text}
        </Checkbox>
      ),
      sorter: (a: BatchFieldData, b: BatchFieldData) => a.field.localeCompare(b.field),
    },
    {
      title: 'Value',
      dataIndex: 'value',
      key: 'value',
      width: '60%',
      render: (text: any) => {
        if (text === null || text === undefined) return <Text type="secondary">null</Text>;
        
        // Display value according to data type
        if (typeof text === 'boolean') return text ? 'true' : 'false';
        if (typeof text === 'object') return JSON.stringify(text);
        
        return text;
      },
    },
  ];

  // Columns for the batch row selection table
  const batchRowColumns = [
    { title: 'Batch No',   dataIndex: 'batchNo', key: 'batchNo' },
    { title: 'Product',    dataIndex: 'product', key: 'product',
      render: (_:any,r:BatchRow)=>r.product||r.productName||`Product #${r.itemKey}` },
    { title: 'Item Key',   dataIndex: 'itemKey', key: 'itemKey', 
      render: (t:string|null) => t || '-' },
    { title: 'Cust Key',   dataIndex: 'custKey', key: 'custKey', 
      render: (t:string|null) => t || '-' },
    { title: 'Ship To Country', dataIndex: 'shipToCountry', key: 'shipToCountry',
      render: (text: string | null, record: BatchRow) => {
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ log ‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        if (process.env.NODE_ENV === 'development') {
          console.log(`üåé Rendering Ship To Country for record:`, {
            custKey: record.custKey,
            shipToCountry: text,
            recordData: record
          });
        }
        
        // ‡∏£‡∏ß‡∏°‡∏•‡∏≠‡∏à‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        const displayValue = text || '-';
        
        // ‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£ highlight ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
        return displayValue === '-' 
          ? <Text type="danger" strong>{displayValue}</Text> 
          : <Text>{displayValue}</Text>;
      }
    },
    { title: 'Total Bags', dataIndex: 'totalBags', key: 'totalBags',
      render: (t:any) => t || '-' },
    { title: 'Action', key: 'action',
      render: (_:any, r:BatchRow) => (
        <Button type="primary" size="small"
                onClick={()=>handleSelectBatchRow(r)}
                disabled={selectedBatchRow?.id===r.id}>
          {selectedBatchRow?.id===r.id ? 'Selected' : 'Select'}
        </Button>
      )
    },
  ];

  // Go back to batch row selection
  const handleGoBack = () => {
    // Reset batch details ‡πÅ‡∏•‡∏∞ selected fields ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å row
    setBatchDetails(null);
    setSelectedFields([]);
    setSelectedBatchRow(null);
    
    // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å row
    setCurrentStep('select-row');
  };

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ö‡∏ï‡∏ä‡πå‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
  const selectBatchFromHistory = (historyItem: BatchHistory) => {
    if (historyItem && historyItem.batchNo) {
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô selectBatchWithinModal ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
      selectBatchWithinModal(historyItem.batchNo);
    }
  };

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ö‡∏ï‡∏ä‡πå‡∏†‡∏≤‡∏¢‡πÉ‡∏ô modal
  const selectBatchWithinModal = (selectedBatchNo: string) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ selectedBatchNo ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!selectedBatchNo || selectedBatchNo.trim() === '') {
      console.error('Please provide a valid batch number');
      return;
    }

    /* 1Ô∏è‚É£  tell parent immediately
       ‚Äì trim() to be safe, queue in next tick so parent render happens
         before we start our own loading spinner                 */
    setTimeout(() => onBatchChange?.(selectedBatchNo.trim()), 0);

    /* 2Ô∏è‚É£  ignore the second click that List.Item fires */
    if (loading) return;          // debounce double-fire on Button + Item
    setLoading(true);

    // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô error ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    setBatchDataRows([]);
    setBatchDetails(null);
    setSelectedBatchRow(null);
    setDataError(null);
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ï‡∏ä‡πå
    saveBatchHistory(selectedBatchNo);
    
    // ‡πÅ‡∏™‡∏î‡∏á tab "Current Batch" ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    setTimeout(() => {
      const tabsElement = document.querySelector('.ant-tabs-nav');
      if (tabsElement) {
        const currentBatchTab = tabsElement.querySelector('.ant-tabs-tab:first-child');
        if (currentBatchTab) {
          (currentBatchTab as HTMLElement).click();
        }
      }
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô tab
      const token = localStorage.getItem('token');
      if (!token) {
        setDataError('Please login before using this feature');
        setLoading(false);
        return;
      }
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å View SQL ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
      const apiUrl = `${apiBaseUrl}/batches/sqlview?batchNo=${selectedBatchNo}`;
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
      fetch(apiUrl, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      })
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        if (!data || (Array.isArray(data) && data.length === 0)) {
          throw new Error(`No data found for batch ${selectedBatchNo}`);
        }
        
        console.log(`üåü Successfully fetched data for batch ${selectedBatchNo}`);
        
        // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å SQL View
        setRawSqlViewData(Array.isArray(data) ? data : [data]);
        setUseDirectViewData(true);
        
        // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÅ‡∏≠‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô
        const batchRows: BatchRow[] = (Array.isArray(data) ? data : [data]).map((item, index) => {
          const itemKeyValue = item.ItemKey || item.itemKey || item.ITEMKEY || item.itemKeyResolved;
          const custKeyValue = item.CustKey || item.custKey || item.CUSTKEY || item.custKeyResolved;
          const productValue = item.Product || item.product || item.BME_Product || item.PRODUCT || 'Unknown';
          const totalBagsValue = item.TotalBags || item.totalBags || item.TOTALBAGS || null;
          const shipToCountry = item.SHIPTO_COUNTRY || item.ShipToCountry || item.shipToCountry || '';
          
          return {
            id: `${selectedBatchNo}-${itemKeyValue || index}-${custKeyValue || ''}`,
            batchNo: selectedBatchNo,
            itemKey: itemKeyValue || null,
            custKey: custKeyValue || null,
            productName: productValue,
            product: productValue,
            totalBags: totalBagsValue ? parseInt(totalBagsValue, 10) : 0,
            shipToCountry: shipToCountry || null,
          };
        });
        
        setBatchDataRows(batchRows);
      })
      .catch(error => {
        console.error('Error fetching data:', error);
        setDataError(`Unable to load data: ${error.message}`);
      })
      .finally(() => {
        setLoading(false);
      });
    }, 100); // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 100ms ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
  };

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏î Enter ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  const handleTableKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleConfirm();
    }
  };

  // Determine the modal title based on current step
  const modalTitle = currentStep === 'select-row' 
    ? `Select Batch Data - ${batchNo}` 
    : `Select Fields for Batch ${batchNo}`;

  // Determine the modal footer based on current step
  const modalFooter = currentStep === 'select-row' 
    ? [
        <Button key="cancel" onClick={onCancel}>
          Cancel
        </Button>
      ]
    : [
        <Button key="back" onClick={handleGoBack}>
          Back
        </Button>,
        <Button key="cancel" onClick={onCancel}>
          Cancel
        </Button>,
        <Button
          key="submit"
          type="primary"
          onClick={handleConfirm}
          disabled={selectedFields.length === 0 || !batchDetails}
          loading={loading}
        >
          Create Elements ({selectedFields.length})
        </Button>,
      ];

  return (
    <Modal
      title={modalTitle}
      open={visible}
      onCancel={onCancel}
      width={900}
      footer={modalFooter}
    >
      {dataError ? (
        <Alert
          message="Unable to load data"
          description={dataError}
          type="error"
          showIcon
        />
      ) : loading && !batchDetails && !batchDataRows.length ? (
        <div style={{ textAlign: 'center', padding: '40px 0' }}>
          <Spin spinning={true}>
            <div style={{ padding: '30px 0' }}>Loading batch data...</div>
          </Spin>
        </div>
      ) : currentStep === 'select-row' ? (
        <>
          <Tabs defaultActiveKey={batchNo && batchNo.trim() !== '' ? "current" : "history"}>
            <TabPane tab="Current Batch" key="current">
              <Alert
                message="Select a batch row"
                description="Please select a batch row to view its data fields."
                type="info"
                showIcon
                style={{ marginBottom: 16 }}
              />
              
              {batchDataRows.length === 0 ? (
                batchNo && batchNo.trim() !== '' && !loading ? (
                  <Alert
                    message="No batch data found"
                    description={`No data was found for batch number "${batchNo}". Please verify the batch number and try again.`}
                    type="warning"
                    showIcon
                    style={{ marginBottom: 16 }}
                  />
                ) : (
                  !loading && (
                    <Alert
                      message="No batch number entered"
                      description="Please enter a valid batch number or select one from the recent batches history."
                      type="info"
                      showIcon
                      style={{ marginBottom: 16 }}
                    />
                  )
                )
              ) : (
                <Table
                  columns={batchRowColumns}
                  dataSource={batchDataRows}
                  rowKey="id"
                  pagination={{ pageSize: 5 }}
                  size="middle"
                  loading={loading}
                  locale={{
                    emptyText: (
                      <div style={{ padding: '20px 0' }}>
                        <p>No batch data found. Please check the batch number and try again.</p>
                      </div>
                    )
                  }}
                />
              )}
            </TabPane>
            <TabPane tab={<><HistoryOutlined /> Recent Batches</>} key="history">
              {batchHistory.length === 0 ? (
                <Alert
                  message="No batch history"
                  description="You haven't used any batches yet."
                  type="info"
                  showIcon
                />
              ) : (
                <List
                  itemLayout="horizontal"
                  dataSource={batchHistory}
                  renderItem={item => (
                    <List.Item
                      actions={[
                        <Button 
                          type="link" 
                          onClick={() => selectBatchWithinModal(item.batchNo)}
                        >
                          Select
                        </Button>
                      ]}
                      onClick={() => selectBatchWithinModal(item.batchNo)}
                      style={{ cursor: 'pointer' }}
                    >
                      <List.Item.Meta
                        title={item.batchNo}
                        description={`Last used: ${new Date(item.timestamp).toLocaleString()}`}
                      />
                    </List.Item>
                  )}
                />
              )}
            </TabPane>
          </Tabs>
        </>
      ) : (
        <>
          <Space direction="vertical" style={{ width: '100%', marginBottom: 16 }}>
            <Input
              placeholder="Search field name or value"
              prefix={<SearchOutlined />}
              value={searchText}
              onChange={(e) => setSearchText(e.target.value)}
              onKeyDown={handleSearchKeyDown}
              ref={searchInputRef}
              allowClear
            />
            
            <Collapse ghost>
              <Panel 
                header={
                  <Space>
                    <InfoCircleOutlined />
                    <Text strong>Usage Instructions</Text>
                  </Space>
                } 
                key="1"
              >
                <ol>
                  <li>Select data fields by checking the boxes</li>
                  <li>Search for fields by typing in the search box</li>
                  <li>Press Enter to quickly add the first matching field</li>
                  <li>Only fields with non-null values are shown</li>
                  <li>Click "Create Elements" to add selected fields to the canvas</li>
                </ol>
              </Panel>
            </Collapse>
          </Space>
          
          <Table
            columns={fieldColumns}
            dataSource={filteredData}
            rowKey="field"
            pagination={{ pageSize: 10, showSizeChanger: true, pageSizeOptions: ['10', '20', '50', '100'] }}
            size="middle"
            loading={loading}
            scroll={{ y: 500 }}
            onRow={(record) => ({
              onKeyDown: handleTableKeyDown,
            })}
          />
          
          {selectedBatchRow && (
            <div style={{ marginTop: 16 }}>
              <Text strong>
                Selected: Batch {selectedBatchRow.batchNo} - Item Key: {selectedBatchRow.itemKey || '-'}, Cust Key: {selectedBatchRow.custKey || '-'}, Product: {selectedBatchRow.product || selectedBatchRow.productName || '-'}
              </Text>
            </div>
          )}
        </>
      )}
    </Modal>
  );
};

export default BatchDataSelectionModal; 