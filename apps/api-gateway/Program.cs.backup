#nullable enable
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using System.Text.Json;
using Dapper;
using DotNetEnv;
using HealthChecks.Redis;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Diagnostics.HealthChecks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.SignalR;
using Microsoft.Data.SqlClient;
using Microsoft.Extensions.Diagnostics.HealthChecks;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using OpenTelemetry.Resources;
using OpenTelemetry.Trace;
using RabbitMQ.Client;
using Services;
using StackExchange.Redis;
using FgLabel.Api.Services;
using FgLabel.Api.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.Extensions.Caching.StackExchangeRedis;
using Microsoft.Extensions.Caching.Distributed;
using System.Data.SqlClient;
using System.Data;
using FgLabel.Shared.Models;
using FgLabel.Shared.Services;
using FgLabel.Shared.Utilities;

namespace FgLabel.Api;

public class Program
{
    // JWT configuration loaded once
    private static string _jwtKey = "";
    private static string _jwtIssuer = "FgLabel";
    private static string _jwtAudience = "FgLabel";
    /* ---------- JWT Helper ------------------------------------------------ */
    private static string GenerateJwtToken(string username)
    {
        var keyBytes = Encoding.UTF8.GetBytes(_jwtKey);

        var handler = new JwtSecurityTokenHandler();
        var descriptor = new SecurityTokenDescriptor
        {
            Subject = new ClaimsIdentity(new[] { new Claim(ClaimTypes.Name, username) }),
            Expires = DateTime.UtcNow.AddDays(7),
            Issuer = _jwtIssuer,
            Audience = _jwtAudience,
            SigningCredentials = new SigningCredentials(
                new SymmetricSecurityKey(keyBytes),
                SecurityAlgorithms.HmacSha256Signature)
        };
        return handler.WriteToken(handler.CreateToken(descriptor));
    }
    private static void ConfigureJwt(JwtBearerOptions opt)
    {
        var keyBytes = Encoding.UTF8.GetBytes(_jwtKey);

        opt.Events = new JwtBearerEvents
        {
            /* ใช้ access_token ผ่าน WebSocket (SignalR) */
            OnMessageReceived = ctx =>
            {
                var accessToken = ctx.Request.Query["access_token"];
                var path = ctx.HttpContext.Request.Path;
                if (!string.IsNullOrEmpty(accessToken) && path.StartsWithSegments("/hubs/jobs"))
                    ctx.Token = accessToken;
                return Task.CompletedTask;
            }
        };

        opt.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidateAudience = true,
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            IssuerSigningKey = new SymmetricSecurityKey(keyBytes),
            ValidIssuer = _jwtIssuer,
            ValidAudience = _jwtAudience
        };
    }

    /* ---------------------------------------------------------------------- */

    // ---------- Config Helper --------------------------------------------- //
    private static string GetRequiredConfig(IConfiguration config, string key, string? fallback = null)
    {
        var value = config[key];
        if (!string.IsNullOrEmpty(value)) return value;
        if (fallback != null) return fallback;
        throw new InvalidOperationException($"Config key '{key}' is missing");
    }
    private static string? GetOptionalConfig(IConfiguration config, string key, string? fallback = null)
    {
        var value = config[key];
        return !string.IsNullOrEmpty(value) ? value : fallback;
    }

    // ---------- HealthCheck ResponseWriter (no async warning) ------------- //
    private static Task WriteHealthCheckResponse(HttpContext ctx, HealthReport rpt)
    {
        var payload = JsonSerializer.Serialize(new
        {
            status = rpt.Status.ToString(),
            checks = rpt.Entries.Select(e => new
            {
                name = e.Key,
                status = e.Value.Status.ToString(),
                descr = e.Value.Description
            })
        });
        ctx.Response.ContentType = "application/json";
        return ctx.Response.WriteAsync(payload);
    }

    public static async Task Main(string[] args)
    {
        /* ------------------------------------------------------------------ */
        /* 1) โหลด .env  +  Environment variables                             */
        /* ------------------------------------------------------------------ */
        Env.Load("../../.env");
        var builder = WebApplication.CreateBuilder(args);
        builder.Configuration.AddEnvironmentVariables();
        builder.WebHost.UseUrls("http://localhost:5051");

        // Load JWT config values once (use section key)
        var jwtSection = builder.Configuration.GetSection("JWT");
        _jwtKey = Environment.GetEnvironmentVariable("JWT__Key") ?? jwtSection["Key"] ?? throw new InvalidOperationException("JWT Key is missing");

        // Validate JWT key length
        if (_jwtKey.Length * 8 < 256) // At least 256 bits (32 bytes)
        {
            throw new InvalidOperationException("JWT Key must be at least 32 bytes long");
        }

        _jwtIssuer = Environment.GetEnvironmentVariable("JWT__Issuer") ?? jwtSection["Issuer"] ?? throw new InvalidOperationException("JWT Issuer is missing");
        _jwtAudience = Environment.GetEnvironmentVariable("JWT__Audience") ?? jwtSection["Audience"] ?? _jwtIssuer;

        Console.WriteLine($"[JWT] KeyLength={_jwtKey.Length}, Issuer={_jwtIssuer}");

        /* ------------------------------------------------------------------ */
        /* 2) Service & Infrastructure                                        */
        /* ------------------------------------------------------------------ */

        // ----- Swagger ----------------------------------------------------- //
        builder.Services.AddEndpointsApiExplorer();
        builder.Services.AddSwaggerGen(c =>
        {
            c.SwaggerDoc("v1", new OpenApiInfo { Title = "FG Label API", Version = "v1" });
            c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
            {
                Description = "JWT Authorization header using the Bearer scheme",
                Name = "Authorization",
                In = ParameterLocation.Header,
                Type = SecuritySchemeType.ApiKey,
                Scheme = "Bearer"
            });
            c.AddSecurityRequirement(new OpenApiSecurityRequirement
            {
                {
                    new OpenApiSecurityScheme
                    {
                        Reference = new OpenApiReference
                        {
                            Type = ReferenceType.SecurityScheme,
                            Id = "Bearer"
                        }
                    },
                    Array.Empty<string>()
                }
            });
        });

        // ----- CORS  (ระบุ origin ของ front-end) --------------------------- //
        var frontendUrl = GetOptionalConfig(builder.Configuration, "Frontend:Url", "http://localhost:3000") ?? "http://localhost:3000";
        builder.Services.AddCors(options =>
        {
            options.AddPolicy("AllowFrontend", builder =>
            {
                builder.WithOrigins(frontendUrl)
                       .AllowAnyMethod()
                       .AllowAnyHeader()
                       .AllowCredentials()
                       .SetIsOriginAllowed(origin => true);
            });
        });

        // ----- SignalR + Redis back-plane ---------------------------------- //
        var redisConn = Environment.GetEnvironmentVariable("Redis__ConnectionString") 
            ?? GetOptionalConfig(builder.Configuration, "Redis__ConnectionString", "localhost:6379") 
            ?? "localhost:6379";
        try
        {
            builder.Services.AddSignalR(options =>
            {
                options.EnableDetailedErrors = true;
                options.MaximumReceiveMessageSize = 102400; // 100 KB
            });
            builder.Services.AddSingleton<IConnectionMultiplexer>(_ =>
                ConnectionMultiplexer.Connect(redisConn));
            builder.Services.AddStackExchangeRedisCache(o =>
            {
                o.Configuration = redisConn;
                o.InstanceName = "FgLabel_";
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine("[FgLabel] Redis/SignalR connection failed: " + ex.Message);
        }

        // ----- JWT --------------------------------------------------------- //
        try
        {
            // Validate JWT config
            if (string.IsNullOrWhiteSpace(_jwtKey))
            {
                throw new InvalidOperationException("JWT Key is missing – set JWT__Key in .env");
            }

            if (string.IsNullOrWhiteSpace(_jwtIssuer))
            {
                throw new InvalidOperationException("JWT Issuer is missing – set JWT__Issuer in .env");
            }

            if (string.IsNullOrWhiteSpace(_jwtAudience))
            {
                throw new InvalidOperationException("JWT Audience is missing – set JWT__Audience in .env");
            }

            builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
                .AddJwtBearer(opt => JwtHelper.ConfigureJwt(opt, _jwtKey, _jwtIssuer, _jwtAudience));
            builder.Services.AddAuthorization();

            Console.WriteLine($"[JWT] KeyLength={_jwtKey.Length}, Issuer={_jwtIssuer}, Audience={_jwtAudience}");
        }
        catch (Exception ex)
        {
            Console.WriteLine("[FgLabel] JWT setup failed: " + ex.Message);
            throw; // Rethrow to prevent app from starting with broken JWT
        }

        // ----- SQL Connection String  ------------------------------------- //
        string sqlConn = Environment.GetEnvironmentVariable("ConnectionStrings__DefaultConnection") 
            ?? builder.Configuration.GetConnectionString("DefaultConnection") 
            ?? "";

        // ----- Health-checks ---------------------------------------------- //
        try
        {
            builder.Services.AddHealthChecks()
                            .AddRedis(redisConn, "redis")
                            .AddRabbitMQ()
                            .AddSqlServer(sqlConn ?? "");
        }
        catch (Exception ex)
        {
            Console.WriteLine("[FgLabel] HealthChecks setup failed: " + ex.Message);
        }

        // ----- LDAP configuration ------------------------------------ //
        try
        {
            // เพิ่มตัวแปรสำหรับ bypass LDAP ในโหมด development
            bool bypassLdap = false;
            var bypassLdapStr = Environment.GetEnvironmentVariable("BYPASS_LDAP");
            if (!string.IsNullOrEmpty(bypassLdapStr) && bypassLdapStr.ToLower() == "true")
            {
                bypassLdap = true;
                Console.WriteLine("[FgLabel] LDAP bypass enabled. Authentication will always succeed in dev mode.");
            }

            var ldapConfig = new
            {
                Url = Environment.GetEnvironmentVariable("AD__Url") 
                    ?? GetRequiredConfig(builder.Configuration, "ActiveDirectory:Url", "ldap://192.168.0.1") 
                    ?? "ldap://192.168.0.1",
                BaseDn = Environment.GetEnvironmentVariable("AD__BaseDn") 
                    ?? GetRequiredConfig(builder.Configuration, "ActiveDirectory:BaseDn", "DC=NWFTH,DC=com") 
                    ?? "DC=NWFTH,DC=com",
                Username = Environment.GetEnvironmentVariable("AD__Username") 
                    ?? GetRequiredConfig(builder.Configuration, "ActiveDirectory:Username", "deachawat@newlywedsfoods.co.th") 
                    ?? "deachawat@newlywedsfoods.co.th",
                Password = Environment.GetEnvironmentVariable("AD__Password") 
                    ?? GetOptionalConfig(builder.Configuration, "AD__Password", "Nwfth.c0m2026") 
                    ?? "Nwfth.c0m2026"
            };

            // Validate LDAP config
            if (string.IsNullOrEmpty(ldapConfig.Url) || string.IsNullOrEmpty(ldapConfig.BaseDn))
            {
                throw new InvalidOperationException("LDAP URL or BaseDN is missing");
            }

            builder.Services.AddScoped<ILdapService, FgLabel.Shared.Services.LdapService>();
            builder.Services.Configure<FgLabel.Shared.Services.LdapConfig>(options =>
            {
                options.Url = ldapConfig.Url;
                options.BaseDn = ldapConfig.BaseDn;
                options.Username = ldapConfig.Username;
                options.Password = ldapConfig.Password;
                options.TimeoutSeconds = 5; // เพิ่ม timeout 5 วินาทีเพื่อป้องกันการรอนาน
                options.DefaultDomain = "newlywedsfoods.co.th"; // เพิ่ม default domain
            });

            // ถ้ามีการตั้งค่า bypass LDAP หรืออยู่ในโหมด development
            if (bypassLdap || (env == "Development" || env == "dev"))
            {
                if (bypassLdap)
                {
                    // ข้ามการตรวจสอบโดยตรงหากตั้งค่า bypass LDAP
                    log.LogWarning("LDAP bypass enabled: Auto-authenticating user {Username}", login.username);
                    isAuthenticated = true;
                }
                else 
                {
                    // ลองตรวจสอบกับ LDAP ก่อน ถ้าไม่ได้ค่อยอนุญาตให้ผ่าน
                    try
                    {
                        isAuthenticated = ldap.ValidateUser(login.username, login.password);
                    }
                    catch (Exception ldapEx)
                    {
                        log.LogWarning("LDAP validation failed, but continuing in dev mode: {Message}", ldapEx.Message);
                        // ในโหมด Development ยอมให้ผ่านแม้ LDAP จะมีปัญหา
                        isAuthenticated = true;
                        log.LogWarning("Development mode: Auto-authenticating user {Username}", login.username);
                    }
                }
            }
            else
            {
                // ในโหมดปกติใช้ LDAP ตรวจสอบตามปกติ
                isAuthenticated = ldap.ValidateUser(login.username, login.password);
            }

            if (!isAuthenticated)
            {
                log.LogWarning("Login failed for user: {Username}", login.username);
                return Results.Unauthorized();
            }

            var user = new { id = login.username, username = login.username, role = "user" };
            var token = JwtHelper.GenerateToken(login.username, _jwtKey, _jwtIssuer, _jwtAudience);
            log.LogInformation("Login successful for user: {Username}", login.username);
            return Results.Ok(new { token, user });
        }
        catch (Exception ex)
        {
            log.LogError(ex, "Error during login for user: {Username}", login.username);
            return Results.Problem("Internal server error during login");
        }
    }

    /* ------------------------------------------------------------------ */
    Console.WriteLine("[FgLabel] Before builder.Build()");
    var app = builder.Build();
    Console.WriteLine("[FgLabel] After builder.Build()");
    var log = app.Services.GetRequiredService<ILoggerFactory>()
                             .CreateLogger("FgLabel.Api");

    app.UseSwagger();
    app.UseSwaggerUI();
    app.UseRouting();
    app.UseCors("AllowFrontend");
    app.UseAuthentication();
    app.UseAuthorization();

    // ---------- /healthz ---------------------------------------------- //
    app.MapHealthChecks("/healthz", new HealthCheckOptions
    {
        ResponseWriter = WriteHealthCheckResponse
    });

    // ---------- /healthz-simple --------------------------------------- //
    app.MapGet("/healthz-simple", () => Results.Ok("OK"));

    // ------------------------------------------------------------------ //
    // 4) Endpoints                                                       //
    // ------------------------------------------------------------------ //

    /* ---------- 4.1  POST /api/auth/login --------------------------------- */
    app.MapPost("/api/auth/login", async (LoginRequest login, ILdapService ldap, ILogger<Program> log) =>
    {
        // Mask password in logs
        log.LogInformation("/api/auth/login username: {Username}", login.username);

        try 
        {
            var env = Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT");
            var bypassLdapStr = Environment.GetEnvironmentVariable("BYPASS_LDAP");
            bool bypassLdap = !string.IsNullOrEmpty(bypassLdapStr) && bypassLdapStr.ToLower() == "true";
            
            bool isAuthenticated = false;

            // ถ้ามีการตั้งค่า bypass LDAP หรืออยู่ในโหมด development
            if (bypassLdap || (env == "Development" || env == "dev"))
            {
                if (bypassLdap)
                {
                    // ข้ามการตรวจสอบโดยตรงหากตั้งค่า bypass LDAP
                    log.LogWarning("LDAP bypass enabled: Auto-authenticating user {Username}", login.username);
                    isAuthenticated = true;
                }
                else 
                {
                    // ลองตรวจสอบกับ LDAP ก่อน ถ้าไม่ได้ค่อยอนุญาตให้ผ่าน
                    try
                    {
                        isAuthenticated = ldap.ValidateUser(login.username, login.password);
                    }
                    catch (Exception ldapEx)
                    {
                        log.LogWarning("LDAP validation failed, but continuing in dev mode: {Message}", ldapEx.Message);
                        // ในโหมด Development ยอมให้ผ่านแม้ LDAP จะมีปัญหา
                        isAuthenticated = true;
                        log.LogWarning("Development mode: Auto-authenticating user {Username}", login.username);
                    }
                }
            }
            else
            {
                // ในโหมดปกติใช้ LDAP ตรวจสอบตามปกติ
                isAuthenticated = ldap.ValidateUser(login.username, login.password);
            }

            if (!isAuthenticated)
            {
                log.LogWarning("Login failed for user: {Username}", login.username);
                return Results.Unauthorized();
            }

            var user = new { id = login.username, username = login.username, role = "user" };
            var token = JwtHelper.GenerateToken(login.username, _jwtKey, _jwtIssuer, _jwtAudience);
        // ----- Batch & Template services  --------------------------------- //
        builder.Services.AddScoped<IBatchService, BatchService>();
        builder.Services.AddScoped<ITemplateService, TemplateService>();

        // ----- OpenTelemetry (optional console exporter) ------------------- //
        try
        {
            builder.Services.AddOpenTelemetry()
                   .WithTracing(b => b
                       .AddAspNetCoreInstrumentation()
                       .AddSqlClientInstrumentation()
                       .AddSource("FgLabel.Api")
                       .SetResourceBuilder(ResourceBuilder.CreateDefault()
                           .AddService("FgLabel.Api"))
                       .AddConsoleExporter());
        }
        catch (Exception ex)
        {
            Console.WriteLine("[FgLabel] OpenTelemetry setup failed: " + ex.Message);
        }

        /* ------------------------------------------------------------------ */
        Console.WriteLine("[FgLabel] Before builder.Build()");
        var app = builder.Build();
        Console.WriteLine("[FgLabel] After builder.Build()");
        var log = app.Services.GetRequiredService<ILoggerFactory>()
                                 .CreateLogger("FgLabel.Api");

        app.UseSwagger();
        app.UseSwaggerUI();
        app.UseRouting();
        app.UseCors("AllowFrontend");
        app.UseAuthentication();
        app.UseAuthorization();

        // ---------- /healthz ---------------------------------------------- //
        app.MapHealthChecks("/healthz", new HealthCheckOptions
        {
            ResponseWriter = WriteHealthCheckResponse
        });

        // ---------- /healthz-simple --------------------------------------- //
        app.MapGet("/healthz-simple", () => Results.Ok("OK"));

        // ------------------------------------------------------------------ //
        // 4) Endpoints                                                       //
        // ------------------------------------------------------------------ //

        /* ---------- 4.1  POST /api/auth/login --------------------------------- */
        app.MapPost("/api/auth/login", async (LoginRequest login, ILdapService ldap, ILogger<Program> log) =>
        {
            // Mask password in logs
            log.LogInformation("/api/auth/login username: {Username}", login.username);

            try 
            {
                var env = Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT");
                var bypassLdapStr = Environment.GetEnvironmentVariable("BYPASS_LDAP");
                bool bypassLdap = !string.IsNullOrEmpty(bypassLdapStr) && bypassLdapStr.ToLower() == "true";
                
                bool isAuthenticated = false;

                // ถ้ามีการตั้งค่า bypass LDAP หรืออยู่ในโหมด development
                if (bypassLdap || (env == "Development" || env == "dev"))
                {
                    if (bypassLdap)
                    {
                        // ข้ามการตรวจสอบโดยตรงหากตั้งค่า bypass LDAP
                        log.LogWarning("LDAP bypass enabled: Auto-authenticating user {Username}", login.username);
                        isAuthenticated = true;
                    }
                    else 
                    {
                        // ลองตรวจสอบกับ LDAP ก่อน ถ้าไม่ได้ค่อยอนุญาตให้ผ่าน
                        try
                        {
                            isAuthenticated = ldap.ValidateUser(login.username, login.password);
                        }
                        catch (Exception ldapEx)
                        {
                            log.LogWarning("LDAP validation failed, but continuing in dev mode: {Message}", ldapEx.Message);
                            // ในโหมด Development ยอมให้ผ่านแม้ LDAP จะมีปัญหา
                            isAuthenticated = true;
                            log.LogWarning("Development mode: Auto-authenticating user {Username}", login.username);
                        }
                    }
                }
                else
                {
                    // ในโหมดปกติใช้ LDAP ตรวจสอบตามปกติ
                    isAuthenticated = ldap.ValidateUser(login.username, login.password);
                }

                if (!isAuthenticated)
                {
                    log.LogWarning("Login failed for user: {Username}", login.username);
                    return Results.Unauthorized();
                }

                var user = new { id = login.username, username = login.username, role = "user" };
                var token = JwtHelper.GenerateToken(login.username, _jwtKey, _jwtIssuer, _jwtAudience);
                log.LogInformation("Login successful for user: {Username}", login.username);
                return Results.Ok(new { token, user });
            }
            catch (Exception ex)
            {
                log.LogError(ex, "Error during login for user: {Username}", login.username);
                return Results.Problem("Internal server error during login");
            }
        });

        /* ---------- 4.2  GET /api/batches/current ------------------------- */
        app.MapGet("/api/batches/current", async (
                   IBatchService batchService) =>
        {
            var batches = await batchService.GetCurrentBatchesAsync();
            return Results.Ok(batches);
        }).RequireAuthorization();

        /* ---------- 4.3  POST /api/templates/auto-create ------------------- */
        app.MapPost("/api/templates/auto-create", async (
                   AutoCreateRequest request,
                   ITemplateService templateService) =>
        {
            var templateId = await templateService.AutoCreateTemplateAsync(request);
            return Results.Ok(new { templateId });
        }).RequireAuthorization();

        /* ---------- 4.4  POST /api/jobs ----------------------------------- */
        app.MapPost("/api/jobs", async (
                   JobRequest body,
                   ITemplateService templateService,
                   IHubContext<Hubs.JobHub> hub) =>
        {
            using var conn = new SqlConnection(sqlConn);

            // Get or create template
            var templateId = await templateService.CreateOrGetTemplateAsync(body.BatchNo);

            var jobId = await conn.ExecuteScalarAsync<long>(@"
                    INSERT INTO FgL.LabelPrintJob (BatchNo,TemplateID,Copies,Status,PrintedAt)
                    OUTPUT INSERTED.JobID
                    VALUES (@BatchNo,@TemplateID,@Copies,'queued',SYSUTCDATETIME())",
                new { body.BatchNo, TemplateID = templateId, body.Copies });

            // ----- สร้าง factory และ connection ที่นี่ ----- //
            var rabbitHost = app.Configuration["RabbitMQ__HostName"] ?? "localhost";
            var rabbitUser = app.Configuration["RabbitMQ__UserName"] ?? "guest";
            var rabbitPass = app.Configuration["RabbitMQ__Password"] ?? "guest";
            var factory = new ConnectionFactory
            {
                HostName = rabbitHost,
                UserName = rabbitUser,
                Password = rabbitPass
            };
            using var mqConn = factory.CreateConnection();
            using var ch = mqConn.CreateModel();
            ch.QueueDeclare("print-jobs", true, false, false);
            var msgBytes = Encoding.UTF8.GetBytes(JsonSerializer.Serialize(new
            {
                jobId,
                body.BatchNo,
                templateId,
                body.Copies
            }));
            ch.BasicPublish("", "print-jobs", null, msgBytes);

            // ----- SignalR push ------------------------------------------ //
            await hub.Clients.All.SendAsync("job:update", new { jobId, status = "queued" });

            return Results.Ok(new { jobId });
        }).RequireAuthorization();

        /* ---------- 4.5  SignalR hub route ------------------------------- */
        app.MapHub<Hubs.JobHub>("/hubs/jobs").RequireAuthorization();

        /* ---------- 4.6  GET /api/me --------------------------------------- */
        app.MapGet("/api/me", (ClaimsPrincipal user) =>
            Results.Ok(new
            {
                id = user.Identity?.Name,
                username = user.Identity?.Name,
                role = "user"
            }))
           .RequireAuthorization();

        /* ---------- 4.7  GET /api/templates ------------------------------- */
        app.MapGet("/api/templates", async ([FromServices] IDbConnection db) =>
        {
            var templates = (await db.QueryAsync<LabelTemplate>(
                "SELECT * FROM FgL.LabelTemplate WHERE Active = 1 ORDER BY TemplateID DESC")).ToList();
            foreach (var tpl in templates)
            {
                var components = await db.QueryAsync<LabelTemplateComponent>(
                    "SELECT * FROM FgL.LabelTemplateComponent WHERE TemplateID = @TemplateID ORDER BY ComponentID",
                    new { tpl.TemplateID });
                tpl.Components = components.ToList();
            }
            return Results.Ok(templates);
        });

        /* ---------- 4.8  POST /api/templates ------------------------------- */
        app.MapPost("/api/templates", async ([FromBody] LabelTemplate template, [FromServices] IDbConnection db) =>
        {
            using var tran = db.BeginTransaction();
            try
            {
                var templateId = await db.ExecuteScalarAsync<int>(@"
                    INSERT INTO FgL.LabelTemplate
                        (Name, Description, Engine, PaperSize, Orientation, Content, Version, Active, CreatedAt, UpdatedAt)
                    VALUES
                        (@Name, @Description, @Engine, @PaperSize, @Orientation, @Content, @Version, @Active, SYSUTCDATETIME(), SYSUTCDATETIME());
                    SELECT CAST(SCOPE_IDENTITY() as int)",
                    new
                    {
                        template.Name,
                        template.Description,
                        template.Engine,
                        template.PaperSize,
                        template.Orientation,
                        template.Content,
                        template.Version,
                        template.Active
                    }, tran);

                if (template.Components != null && template.Components.Count > 0)
                {
                    foreach (var c in template.Components)
                    {
                        await db.ExecuteAsync(@"
                            INSERT INTO FgL.LabelTemplateComponent
                                (TemplateID, ComponentType, X, Y, W, H, FontName, FontSize, Placeholder, StaticText, BarcodeFormat, CreatedAt)
                            VALUES
                                (@TemplateID, @ComponentType, @X, @Y, @W, @H, @FontName, @FontSize, @Placeholder, @StaticText, @BarcodeFormat, SYSUTCDATETIME())",
                            new
                            {
                                TemplateID = templateId,
                                c.ComponentType,
                                c.X,
                                c.Y,
                                c.W,
                                c.H,
                                c.FontName,
                                c.FontSize,
                                c.Placeholder,
                                c.StaticText,
                                c.BarcodeFormat
                            }, tran);
                    }
                }
                tran.Commit();
                return Results.Ok(new { TemplateID = templateId });
            }
            catch (Exception ex)
            {
                tran.Rollback();
                return Results.Problem(ex.Message);
            }
        });

        /* ---------- 4.9  PUT /api/templates/{id} -------------------------- */
        app.MapPut("/api/templates/{id}", async (int id, [FromBody] LabelTemplate template, [FromServices] IDbConnection db) =>
        {
            using var tran = db.BeginTransaction();
            try
            {
                await db.ExecuteAsync(@"
                    UPDATE FgL.LabelTemplate
                    SET Name=@Name, Description=@Description, Engine=@Engine, PaperSize=@PaperSize, Orientation=@Orientation, Content=@Content, Version=@Version, Active=@Active, UpdatedAt=SYSUTCDATETIME()
                    WHERE TemplateID=@TemplateID",
                    new
                    {
                        TemplateID = id,
                        template.Name,
                        template.Description,
                        template.Engine,
                        template.PaperSize,
                        template.Orientation,
                        template.Content,
                        template.Version,
                        template.Active
                    }, tran);

                await db.ExecuteAsync("DELETE FROM FgL.LabelTemplateComponent WHERE TemplateID=@TemplateID", new { TemplateID = id }, tran);

                if (template.Components != null && template.Components.Count > 0)
                {
                    foreach (var c in template.Components)
                    {
                        await db.ExecuteAsync(@"
                            INSERT INTO FgL.LabelTemplateComponent
                                (TemplateID, ComponentType, X, Y, W, H, FontName, FontSize, Placeholder, StaticText, BarcodeFormat, CreatedAt)
                            VALUES
                                (@TemplateID, @ComponentType, @X, @Y, @W, @H, @FontName, @FontSize, @Placeholder, @StaticText, @BarcodeFormat, SYSUTCDATETIME())",
                            new
                            {
                                TemplateID = id,
                                c.ComponentType,
                                c.X,
                                c.Y,
                                c.W,
                                c.H,
                                c.FontName,
                                c.FontSize,
                                c.Placeholder,
                                c.StaticText,
                                c.BarcodeFormat
                            }, tran);
                    }
                }
                tran.Commit();
                return Results.Ok();
            }
            catch (Exception ex)
            {
                tran.Rollback();
                return Results.Problem(ex.Message);
            }
        });

        /* ---------- 4.10  POST /api/templates/{id}/map -------------------- */
        app.MapPost("/api/templates/{id}/map", async (int id, [FromBody] LabelTemplateMapping mapping, [FromServices] IDbConnection db) =>
        {
            await db.ExecuteAsync(@"
                INSERT INTO FgL.LabelTemplateMapping
                    (TemplateID, ProductKey, CustomerKey, Priority, Active, CreatedAt)
                VALUES
                    (@TemplateID, @ProductKey, @CustomerKey, @Priority, @Active, SYSUTCDATETIME())",
                new
                {
                    TemplateID = id,
                    mapping.ProductKey,
                    mapping.CustomerKey,
                    mapping.Priority,
                    mapping.Active
                });
            return Results.Ok();
        });

        /* ---------- 4.11  POST /api/print --------------------------------- */
        app.MapPost("/api/print", async ([FromBody] PrintJobRequest req, [FromServices] IDbConnection db) =>
        {
            var jobId = await db.ExecuteScalarAsync<long>(@"
                INSERT INTO FgL.LabelPrintJob (BatchNo, TemplateID, PrinterID, ProductKey, CustomerKey, Copies, Status, PrintedBy, PrintedAt)
                VALUES (@BatchNo, @TemplateID, @PrinterID, @ProductKey, @CustomerKey, @Copies, 'queued', @PrintedBy, SYSUTCDATETIME());
                SELECT CAST(SCOPE_IDENTITY() as bigint)",
                new
                {
                    req.BatchNo,
                    req.TemplateID,
                    req.PrinterID,
                    req.ProductKey,
                    req.CustomerKey,
                    req.Copies,
                    req.PrintedBy
                });
            return Results.Ok(new { JobID = jobId });
        });

        /* ------------------------------------------------------------------ */
        try
        {
            Console.WriteLine("[FgLabel] Before app.RunAsync()");
            await app.RunAsync();
            Console.WriteLine("[FgLabel] After app.RunAsync()");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[FgLabel] API Gateway crashed: {ex}");
            throw;
        }
    }
}

/* ---------- Request-record ---------------------------------------------- */
public record LoginRequest(string username, string password);
public record JobRequest(string BatchNo, int TemplateId, int Copies);

// ====== PrintJobRequest Model ======
public class PrintJobRequest
{
    public string BatchNo { get; set; } = string.Empty;
    public int? TemplateID { get; set; }
    public int? PrinterID { get; set; }
    public string? ProductKey { get; set; }
    public string? CustomerKey { get; set; }
    public int Copies { get; set; } = 1;
    public string? PrintedBy { get; set; }
}
