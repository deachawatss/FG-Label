# Base image from Microsoft containing .NET 8 SDK and Runtime for Windows Server Core
# Adjust the base image tag based on your specific Windows version requirements if needed
# E.g., mcr.microsoft.com/dotnet/sdk:8.0-windowsservercore-ltsc2019
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
WORKDIR /source

# Copy csproj and restore as distinct layers to leverage Docker cache
COPY ./apps/api-gateway/*.csproj ./apps/api-gateway/
COPY ./FgLabel.sln ./
# If no solution file, adjust restore command below

# Copy other necessary project files if they exist (e.g., Directory.Build.props)
# COPY Directory.Build.props ./

# Restore dependencies for the API project using the solution file context if available
# This helps if there are shared projects/dependencies
RUN dotnet restore FgLabel.sln
# If restoring project directly: RUN dotnet restore ./apps/api-gateway/FgLabel.Api.csproj

# Copy the rest of the application code
COPY . .

# Build and publish the API Gateway project
WORKDIR /source/apps/api-gateway
RUN dotnet publish FgLabel.Api.csproj -c Release -o /app/publish --no-restore

# Final stage/image
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS final
WORKDIR /app
COPY --from=build /app/publish .

# Expose the port Kestrel will listen on (defined in docker-compose.yml environment variables)
# Default ASP.NET Core port is 8080, but we set it via ASPNETCORE_URLS
EXPOSE 8080

# Set the entry point for the container
ENTRYPOINT ["dotnet", "FgLabel.Api.dll"] 