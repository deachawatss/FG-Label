[1mdiff --git a/apps/web-ui/src/components/TemplateDesigner/ElementRenderer.tsx b/apps/web-ui/src/components/TemplateDesigner/ElementRenderer.tsx[m
[1mindex 105c374..bb1b9d7 100644[m
[1m--- a/apps/web-ui/src/components/TemplateDesigner/ElementRenderer.tsx[m
[1m+++ b/apps/web-ui/src/components/TemplateDesigner/ElementRenderer.tsx[m
[36m@@ -1,5 +1,5 @@[m
 import React, { memo } from 'react';[m
[31m-import { ElementType, TextElement, RectElement, BarcodeElement, QrElement, LineElement } from '../../models/TemplateDesignerTypes';[m
[32m+[m[32mimport { ElementType, TextElement, RectElement, BarcodeElement, QrElement, LineElement, EllipseElement } from '../../models/TemplateDesignerTypes';[m
 [m
 // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ù‡∏±‡πà‡∏á client[m
 const isClient = typeof window !== 'undefined';[m
[36m@@ -10,6 +10,7 @@[m [mlet Rect: any = null;[m
 let Text: any = null;[m
 let Image: any = null;[m
 let Line: any = null;[m
[32m+[m[32mlet Circle: any = null;[m
 [m
 if (isClient) {[m
   const Konva = require('react-konva');[m
[36m@@ -18,6 +19,7 @@[m [mif (isClient) {[m
   Text = Konva.Text;[m
   Image = Konva.Image;[m
   Line = Konva.Line;[m
[32m+[m[32m  Circle = Konva.Circle;[m
 }[m
 [m
 interface ElementRendererProps {[m
[36m@@ -51,16 +53,21 @@[m [mexport const ElementRenderer: React.FC<ElementRendererProps> = memo(({[m
   const MemoGroup = memo(Group);[m
   const MemoText = memo(Text);[m
   const MemoRect = memo(Rect);[m
[31m-  const MemoKonvaImage = memo(Image);[m
[32m+[m[32m  const MemoImage = memo(Image);[m
   const MemoLine = memo(Line);[m
[32m+[m[32m  const MemoCircle = memo(Circle);[m
 [m
[31m-  // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á element[m
[32m+[m[32m  // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á element[m
   if (element.type === 'text') {[m
     const textElement = element as TextElement;[m
[32m+[m[41m    [m
[32m+[m[32m    // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ fontSize ‡∏à‡∏≤‡∏Å element ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ[m
[32m+[m[32m    const fontSize = textElement.fontSize || 16;[m
[32m+[m[41m    [m
     return ([m
       <MemoText[m
         text={textElement.text}[m
[31m-        fontSize={textElement.fontSize}[m
[32m+[m[32m        fontSize={fontSize} // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ fontSize ‡∏à‡∏≤‡∏Å element ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô[m
         fontFamily={textElement.fontFamily}[m
         fill={textElement.fill}[m
         width={textElement.width}[m
[36m@@ -73,124 +80,77 @@[m [mexport const ElementRenderer: React.FC<ElementRendererProps> = memo(({[m
         lineHeight={1.2}[m
       />[m
     );[m
[31m-  }[m
[31m-  [m
[31m-  if (element.type === 'rect') {[m
[31m-    const rectElement = element as RectElement;[m
[31m-    return ([m
[31m-      <MemoRect[m
[31m-        width={rectElement.width}[m
[31m-        height={rectElement.height}[m
[31m-        fill={rectElement.fill}[m
[31m-        cornerRadius={5}[m
[31m-        stroke={rectElement.borderColor}[m
[31m-        strokeWidth={rectElement.borderWidth}[m
[31m-      />[m
[31m-    );[m
[31m-  }[m
[31m-  [m
[31m-  if (element.type === 'barcode') {[m
[32m+[m[32m  } else if (element.type === 'barcode') {[m
     const barcodeElement = element as BarcodeElement;[m
[31m-    // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å state ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡∏´‡∏£‡∏∑‡∏≠ render placeholder[m
[31m-    const barcodeUrl = barcodeDataUrls[barcodeElement.id];[m
[31m-    [m
[31m-    // ‡∏•‡∏î‡∏Å‡∏≤‡∏£ log ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ‡πÇ‡∏î‡∏¢ log ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï[m
[31m-    if (!barcodeUrl) {[m
[31m-      console.log(`Rendering barcode element ${barcodeElement.id}:`, { [m
[31m-        value: barcodeElement.value,[m
[31m-        hasDataUrl: false,[m
[31m-        hasImage: false[m
[31m-      });[m
[31m-    }[m
[31m-    [m
[31m-    if (barcodeUrl) {[m
[31m-      const imageObj = barcodeImages[barcodeElement.id] || new window.Image();[m
[31m-      if (!barcodeImages[barcodeElement.id]) {[m
[31m-        imageObj.src = barcodeUrl;[m
[31m-        console.log(`Setting barcode image source for ${barcodeElement.id}`);[m
[31m-        [m
[31m-        imageObj.onload = () => {[m
[31m-          console.log(`Barcode image loaded for ${barcodeElement.id}`);[m
[31m-        };[m
[31m-        [m
[31m-        imageObj.onerror = (err) => {[m
[31m-          console.error(`Error loading barcode image for ${barcodeElement.id}:`, err);[m
[31m-        };[m
[31m-      }[m
[31m-      [m
[31m-      if (imageObj.complete && imageObj.naturalWidth !== 0) {[m
[31m-        return ([m
[31m-          <MemoKonvaImage[m
[31m-            image={imageObj}[m
[31m-            width={barcodeElement.width}[m
[31m-            height={barcodeElement.height}[m
[31m-          />[m
[31m-        );[m
[31m-      }[m
[31m-    }[m
[31m-    [m
[31m-    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ dataUrl ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏¢‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á barcode[m
[31m-    if (!barcodeUrl && barcodeElement.value) {[m
[31m-      // ‡πÉ‡∏ä‡πâ ref ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á[m
[31m-      const requestTimerId = React.useRef<any>(null);[m
[31m-      [m
[31m-      if (!requestTimerId.current) {[m
[31m-        console.log(`Requesting barcode update for ${barcodeElement.id} with value ${barcodeElement.value}`);[m
[31m-        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å update ‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ó‡∏µ‡πà render[m
[31m-        requestTimerId.current = setTimeout(() => {[m
[31m-          if (!barcodeDataUrls[barcodeElement.id]) {[m
[31m-            updateBarcodeDataUrl(barcodeElement);[m
[31m-          }[m
[31m-          requestTimerId.current = null;[m
[31m-        }, 50);[m
[31m-      }[m
[31m-    }[m
[31m-    [m
[31m-    // ‡πÅ‡∏™‡∏î‡∏á placeholder ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°[m
[32m+[m[32m    // ‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏Ñ‡∏á‡∏ó‡∏µ‡πà 14 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô batch-search.tsx[m
[32m+[m[32m    const barcodeFontSize = 14;[m
[32m+[m
[32m+[m[32m    // ‡πÅ‡∏™‡∏î‡∏á placeholder ‡∏´‡∏£‡∏∑‡∏≠ real barcode image[m
     return ([m
[31m-      <MemoGroup>[m
[31m-        <MemoRect [m
[31m-          width={barcodeElement.width} [m
[31m-          height={barcodeElement.height} [m
[31m-          fill="#ffffff"[m
[31m-          cornerRadius={2}[m
[31m-          stroke="#eeeeee"[m
[31m-          strokeWidth={1}[m
[31m-        />[m
[31m-        {/* ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ó‡πà‡∏á Barcode ‡∏à‡∏≥‡∏•‡∏≠‡∏á - ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô */}[m
[31m-        {Array.from({ length: 20 }).map((_, i) => {[m
[31m-          // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏°‡∏°‡∏≤‡∏ï‡∏£ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô[m
[31m-          const baseHeight = 70; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô JsBarcode[m
[31m-          const randomHeight = baseHeight - Math.abs((i % 7) - 3) * 8; // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô[m
[31m-          [m
[31m-          return ([m
[31m-            <MemoRect [m
[31m-              key={`bar-${i}`}[m
[31m-              x={barcodeElement.width / 2 - 50 + i * 5}[m
[31m-              y={10}[m
[31m-              width={2}[m
[31m-              height={randomHeight}[m
[31m-              fill="#000000"[m
[32m+[m[32m      <>[m
[32m+[m[32m        {barcodeImages && barcodeImages[element.id] ? ([m
[32m+[m[32m          <MemoImage[m
[32m+[m[32m            image={barcodeImages[element.id]}[m
[32m+[m[32m            width={element.wi